#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/f7c001ad-60fc-4aab-b474-7d84cdc0bb37

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  CloudPercentage moisture;
  CloudRelativeHumidity humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include<DHT.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>
#include <Adafruit_Sensor.h>

#define MOIS_Pin 34
#define DHT11_Pin 13
#define R1P_Pin 21
#define R2S_Pin 22
#define TFT_CS 4
#define TFT_DC 2
#define TFT_MOSI 5
#define TFT_SCLK 33
#define TFT_RST 26

DHT dht(DHT11_Pin, DHT11);
//For ST7735-based displays, we will use this call
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

bool PUMP_stat;
bool SPRINKLER_stat;
float Temperature = 0;
float Humidity = 0;
float Moisture = 0;
float Moisture_percentage = 0;
void DHT();
void MOIS();
void PUMP();
void printdata();


TaskHandle_t Task1;




void DHT() {
  Temperature = dht.readTemperature();
  Humidity = dht.readHumidity();
  temperature = Temperature;
  humidity = Humidity;


}
void MOIS() {
  Moisture = analogRead(MOIS_Pin);
  Moisture_percentage = (100 - ((Moisture / 4095.00) * 100));
  moisture = Moisture_percentage;

}

void PUMP() {
  
  MOIS();
  DHT();

  Serial.print("MOISTURE: ");
  Serial.println(Moisture_percentage);
  Serial.print("TEMPERATURE: ");
  Serial.println(Temperature);
  Serial.print("HUMIDITY: ");
  Serial.println(Humidity);
  Serial.print("PUMP_stat");
  Serial.println(PUMP_stat);
  Serial.print("SPRINKLER_stat");
  Serial.println(SPRINKLER_stat);
  MOIS();
  DHT();

  while (Moisture_percentage < 35) {
    MOIS();
    DHT();

    if (Moisture_percentage < 35) {
      MOIS();
      DHT();

      digitalWrite(R1P_Pin, HIGH);
      PUMP_stat = true;
      MOIS();
      DHT();

      Serial.print("PUMP_stat");
      Serial.println(PUMP_stat);
      Serial.print("SPRINKLER_stat");
      Serial.println(SPRINKLER_stat);
      MOIS();
      DHT();

      while (Moisture_percentage < 35) {
        MOIS();
        DHT();

        if (Temperature > 30) {
          MOIS();
          DHT();


          digitalWrite(R2S_Pin, HIGH);
          SPRINKLER_stat = true;
          DHT();
          MOIS();

          Serial.print("PUMP_stat: ");
          Serial.println(PUMP_stat);
          Serial.print("SPRINKLER_stat: ");
          Serial.println(SPRINKLER_stat);

          DHT();
          MOIS();



        }
        DHT();
        MOIS();


      }

      DHT();
      MOIS();

      digitalWrite(R1P_Pin, LOW);
      PUMP_stat = false;
      MOIS();
      DHT();

      digitalWrite(R2S_Pin, LOW);
      SPRINKLER_stat = false;
      MOIS();
      DHT();

      Serial.print("PUMP_stat");
      Serial.println(PUMP_stat);
      Serial.print("SPRINKLER_stat");
      Serial.println(SPRINKLER_stat);
      MOIS();
      DHT();


    }
    DHT();
    MOIS();


  }
  DHT();
  MOIS();


}
void printdata() {
  
  tft.setRotation(1);
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_WHITE);
  
  tft.setCursor(1, 10);
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(1.5);
  tft.print("Moisture-%: ");
  tft.println(Moisture_percentage);
  tft.print("\n");
  tft.print("Temp: ");
  tft.println(Temperature);
  tft.print("\n");
  tft.print("Humi: ");
  tft.println(Humidity);
  tft.print("\n");
  if (PUMP_stat == true) {
    tft.print("PUMP_stat: ");
    tft.println("ON");
    tft.print("\n");

  } else {
    tft.print("PUMP_stat: ");
    tft.println("OFF");
    tft.print("\n");
  }

  if (SPRINKLER_stat == true) {
    tft.print("SPRINKLER_stat: ");
    tft.println("ON");
    tft.print("\n");
  } else {
    tft.print("SPRINKLER_stat: ");
    tft.println("OFF");
    tft.print("\n");
  }
  

}

void Task1code( void * parameter) {

  for (;;) {
    Serial.print("Task2 running on core ");
    Serial.println(xPortGetCoreID());
    ArduinoCloud.update();
    Serial.println(F("Initialized"));
    temperature = Temperature;
    humidity = Humidity;
    moisture = Moisture_percentage;
    //////1.8 inch TFT//////////////st7735
    tft.initR(INITR_BLACKTAB);
    delay(10);
    printdata();
    delay(1000);
   
  }
}


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  Serial.print("setup() running on core ");
  Serial.println(xPortGetCoreID());

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(DHT11_Pin, INPUT);
  pinMode(MOIS_Pin, INPUT);
  pinMode(R1P_Pin, OUTPUT);
  pinMode(R2S_Pin, OUTPUT);
  Serial.print("Pin Configured");


  xTaskCreatePinnedToCore(
    Task1code, /* Function to implement the task */
    "Task1", /* Name of the task */
    8000,  /* Stack size in words */
    NULL,  /* Task input parameter */
    0,  /* Priority of the task */
    &Task1,  /* Task handle. */
    0); /* Core where the task should run */

  



}

void loop() {
   Serial.print("Task1 running on core ");
    Serial.println(xPortGetCoreID());
    
    // Your code here
    Serial.print("\n\n");
    Serial.println("Program Started");

    MOIS();
    DHT();


    Serial.print("\n");
    Serial.print("MOISTURE: ");
    Serial.println(Moisture_percentage);
    Serial.print("TEMPERATURE: ");
    Serial.println(Temperature);
    Serial.print("HUMIDITY: ");
    Serial.println(Humidity);
    Serial.print("PUMP_stat");
    Serial.println(PUMP_stat);
    Serial.print("SPRINKLER_stat");
    Serial.println(SPRINKLER_stat);
    Serial.print("\n");
    MOIS();
    DHT();

    PUMP();
    delay(1000);
    MOIS();
    DHT();
  
  


}




























